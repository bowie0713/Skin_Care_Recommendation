abline(h = mean(res1), col = "red")
hist(res1, main = "Histogram of Residual Values")
qqnorm(res1, main = "Normal Q-Q Plot of Residual Values")
qqline(res1, col = "blue")
par(mfrow = c(1, 2))
acf(res1, lag.max = 40, main = "ACF of Model 1 Residuals")
pacf(res1, lag.max = 40, main = "PACF of Model 1 Residuals")
shapiro.test(res1)
# Box-Pierce
Box.test(res1, lag = 12, type = "Box-Pierce", fitdf = 5)
# Box-Ljung
Box.test(res1, lag = 12, type = "Ljung-Box", fitdf = 5)
# McLeod-Li
Box.test((res1^2), lag = 12, type = "Ljung-Box", fitdf = 0)
ar(res1, aic = T, order.max = NULL, method = c("yule-walker"))
par(mfrow = c(1, 2))
plot.roots(polyroot(c(1, 0.3190)), NULL, main = "Roots of Nonseasonal AR Component")
plot.roots(polyroot(c(1, -0.1329, 0.2675)), NULL, main = "Roots of Seasonal AR Component")
par(mfrow = c(1, 3))
fit2 <- arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 0), period = 4), method = "ML")
res2 <- residuals(fit2)
plot.ts(res2, main = "Plot of Residuals", xlab = "Year", ylab = "Value")
abline(h = mean(res2), col = "red")
hist(res2, main = "Histogram of Residual Values")
qqnorm(res2, main = "Normal Q-Q Plot of Residual Values")
qqline(res2, col = "blue")
par(mfrow = c(1, 2))
acf(res2, lag.max = 40, main = "ACF of Model 2 Residuals")
pacf(res2, lag.max = 40, main = "PACF of Model 2 Residuals")
shapiro.test(res2)
# Box-Pierce
Box.test(res2, lag = 12, type = "Box-Pierce", fitdf = 3)
# Box-Ljung
Box.test(res2, lag = 12, type = "Ljung-Box", fitdf = 3)
# McLeod-Li
Box.test((res2^2), lag = 12, type = "Ljung-Box", fitdf = 0)
ar(res2, aic = T, order.max = NULL, method = c("yule-walker"))
bc_pred <- predict(fit1, n.ahead = 7)
upper_pred <- bc_pred$pred + (2 * bc_pred$se)
lower_pred <- bc_pred$pred - (2 * bc_pred$se)
pred_ts <- ts(data = bc_pred$pred, start = c(2023, 1), end = c(2024, 3), frequency = 4)
ts.plot(prices_bc, xlim = c(1985, 2025), ylim = c(2.84, 2.88), main = "Forecast of Transformed Data Using Model 1", xlab = "Year", ylab = "Price")
lines(upper_pred, col = "blue", lty = "dashed")
lines(lower_pred, col = "blue", lty = "dashed")
points(pred_ts, col = "red")
og_pred_ts <- InvBoxCox(bc_pred$pred, lambda = optimal_lambda)
U = InvBoxCox(upper_pred, optimal_lambda)
L = InvBoxCox(lower_pred, optimal_lambda)
ts.plot(prices_train, xlim = c(1985, 2025), ylim = c(50000, 325000), main = "Forecast of Original Data Using Model 1", xlab = "Year", ylab = "Price")
lines(U, col = "blue", lty = "dashed")
lines(L, col = "blue", lty = "dashed")
points(og_pred_ts, col = "red")
par(mfrow = c(1, 2))
ts.plot(prices_train, xlim = c(2020, 2025), ylim = c(140000, 325000), main = "Forecast of Original Data Using Model 1", xlab = "Year", ylab = "Price")
lines(U, col = "blue", lty = "dashed")
lines(L, col = "blue", lty = "dashed")
points(og_pred_ts, col = "red")
ts.plot(prices, xlim = c(2020, 2025), ylim = c(140000, 325000), main = "Forecast of Original Data Using Model 1", xlab = "Year", ylab = "Price")
lines(U, col = "blue", lty = "dashed")
lines(L, col = "blue", lty = "dashed")
points(og_pred_ts, col = "red")
ts.plot(prices, xlim = c(2020, 2025), ylim = c(140000, 325000), main = "Forecast of Original Data Using Model 1", xlab = "Year", ylab = "Price")
lines(U, col = "blue", lty = "dashed")
lines(L, col = "blue", lty = "dashed")
points(og_pred_ts, col = "red")
# q = 1, Q = 2
arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(0, 0, 2), period = 4), method = "ML")
paste("AICc of model with q = 1, Q = 2, p = P = 0: ",
AICc(arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(0, 0, 2), period = 4), method = "ML"))
)
# q = 1, Q = 2, Q1 fixed
arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(0, 0, 2), period = 4), fixed = c(NA, 0, NA), method = "ML")
AICc(arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(0, 0, 2), period = 4), fixed = c(NA, 0, NA), method = "ML"))
# p = 1, P = 2
arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 0), period = 4), method = "ML")
paste("AICc of model with p = 1, P = 2, q = Q = 0: ",
AICc(arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 0), period = 4), method = "ML"))
)
# p = 1, q = 0, P = 2, Q = 2
arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML")
paste("AICc of model with p = 1, P = 2, q = 0, Q = 2: ",
AICc(arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML"))
)
library(tidyverse)
library(readxl)
library(MuMIn)
library(forecast)
# read in data
housing <- read_xlsx("~/Desktop/PSTAT 174/Project/medians_po_mh.xlsx")
# remove first three rows (headers, column names)
housing <- housing[-c(1:3), ]
# rename variables
colnames(housing) <- c("area", "year", "quarter", "median_price")
# convert price to a numeric variable
housing$median_price <- as.numeric(housing$median_price)
# create time series from "median_price" variable
# frequency = number of observations per cycle (a year is a cycle)
prices <- ts(housing$median_price, frequency = 4, start = c(1985, 1), end = c(2024, 3))
# training set
prices_train <- ts(prices[c(1:152)], frequency = 4, start = c(1985, 1), end = c(2022, 4))
# testing set
prices_test <- ts(prices[c(153:159)], frequency = 4, start = c(2023, 1), end = c(2024, 3))
plot(prices_train, main = "Median House Prices 1985-2024 (USA)", ylab = "Median Price ($)", xlab = "Year")
par(mfrow = c(1, 2))
hist(prices_train, main = "Histogram of Housing Prices", xlab = "Median Price ($)", col = "light blue")
acf(prices_train, lag.max = 50, main = "ACF of Housing Prices")
par(mfrow = c(1, 2))
# calculate the optimal value of lambda for the transformation
t <- 1:length(prices_train)
bc_trans <- MASS::boxcox(prices_train ~ t, plotit = T)
optimal_lambda <- bc_trans$x[which(bc_trans$y == max(bc_trans$y))]
# apply Box-Cox transformation to data
prices_bc <- (1 / optimal_lambda) * (prices_train^optimal_lambda - 1)
# visualize transformed data
hist(prices_bc, main = "Box-Cox Transformed Data", xlab = "Transformed Values", col = "light blue")
# retrieve different components of transformed data
components <- decompose(prices_bc)
plot(components)
# difference transformed data once at lag 1
y1 <- diff(prices_bc, lag = 1)
plot(y1, main = "Plot of Box-Cox Transformed + Differenced Data", xlab = "Year", ylab = "Transformed Values")
abline(h = mean(y1), col = "red")
paste("Variance of Box-Cox Transformed Data: ", var(prices_bc))
paste("Variance of Box-Cox Transformed and Differenced Data: ", var(y1))
# difference transformed + differenced data at lag 4
y14 <- diff(y1, lag = 4)
plot(y14, main = "Plot of Box-Cox Transformed + Differenced^2 Data", xlab = "Year", ylab = "Transformed Values")
abline(h = mean(y14), col = "red")
paste("Variance of Box-Cox Transformed Data: ", var(y1))
paste("Variance of Box-Cox Transformed and Differenced (twice) Data: ", var(y14))
acf(y1, lag.max = 40, main = "ACF of Box-Cox Transformed Data Differenced at Lag 1")
pacf(y1, lag.max = 40, main = "PACF of Box-Cox Transformed Data Differenced at Lag 1")
# q = 1, Q = 2
arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(0, 0, 2), period = 4), method = "ML")
paste("AICc of model with q = 1, Q = 2, p = P = 0: ",
AICc(arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(0, 0, 2), period = 4), method = "ML"))
)
# q = 1, Q = 2, Q1 fixed
arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(0, 0, 2), period = 4), fixed = c(NA, 0, NA), method = "ML")
AICc(arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(0, 0, 2), period = 4), fixed = c(NA, 0, NA), method = "ML"))
# p = 1, P = 2
arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 0), period = 4), method = "ML")
paste("AICc of model with p = 1, P = 2, q = Q = 0: ",
AICc(arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 0), period = 4), method = "ML"))
)
# p = 1, P = 2, P1 fixed
arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 0), period = 4), fixed = c(NA, 0, NA), method = "ML")
AICc(arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 0), period = 4), fixed = c(NA, 0, NA), method = "ML"))
# p = 1, q = 0, P = 2, Q = 2
arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML")
paste("AICc of model with p = 1, P = 2, q = 0, Q = 2: ",
AICc(arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML"))
)
# models not shown
# q = 1, Q = 0
arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(0, 0, 0), period = 4), method = "ML")
AICc(arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(0, 0, 0), period = 4), method = "ML"))
# p = 1, P = 0
arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(0, 0, 0), period = 4), method = "ML")
AICc(arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(0, 0, 0), period = 4), method = "ML"))
# p = 0, P = 2
arima(prices_bc, order = c(0, 1, 0), seasonal = list(order = c(2, 0, 0), period = 4), method = "ML")
AICc(arima(prices_bc, order = c(0, 1, 0), seasonal = list(order = c(2, 0, 0), period = 4), method = "ML"))
# p = 0, q = 1, P = 2, Q = 2
arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML")
AICc(arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML"))
# p = 0, q = 0, P = 2, Q = 2
arima(prices_bc, order = c(0, 1, 0), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML")
AICc(arima(prices_bc, order = c(0, 1, 0), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML"))
# p = 1, q = 1, P = 2, Q = 2
arima(prices_bc, order = c(1, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML")
AICc(arima(prices_bc, order = c(1, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML"))
# p = 1, q = 1, P = 2, Q = 2, p1 = q1 = 0
arima(prices_bc, order = c(1, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), fixed = c(0, 0, NA, NA, NA, NA), method = "ML")
AICc(arima(prices_bc, order = c(1, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), fixed = c(0, 0, NA, NA, NA, NA), method = "ML"))
# p = 1, q = 1, P = 2, Q = 2, p1 = 0
arima(prices_bc, order = c(1, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), fixed = c(0, NA, NA, NA, NA, NA), method = "ML")
AICc(arima(prices_bc, order = c(1, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), fixed = c(0, NA, NA, NA, NA, NA), method = "ML"))
par(mfrow = c(1, 3))
# plot the roots and inverse roots of the model's characteristic equations
source("plot.roots.R")
plot.roots(polyroot(c(1, 0.3223)), NULL, main = "Roots of Nonseasonal AR Component")
plot.roots(NULL, polyroot(c(1, -0.6068, 0.7883)), main = "Roots of Seasonal MA Component")
plot.roots(polyroot(c(1, -0.3821, 0.8471)), NULL, main = "Roots of Seasonal AR Component")
par(mfrow = c(1, 3))
# fit model 1 to transformed data
fit1 <- arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML")
# retrieve residuals from model 1's fit
res1 <- residuals(fit1)
# visualize residuals of model 1
plot.ts(res1, main = "Plot of Residuals", xlab = "Year", ylab = "Value")
abline(h = mean(res1), col = "red")
hist(res1, main = "Histogram of Residual Values")
qqnorm(res1, main = "Normal Q-Q Plot of Residual Values")
qqline(res1, col = "blue")
par(mfrow = c(1, 2))
acf(res1, lag.max = 40, main = "ACF of Model 1 Residuals")
pacf(res1, lag.max = 40, main = "PACF of Model 1 Residuals")
# Shapiro-Wilk
shapiro.test(res1)
# Box-Pierce
Box.test(res1, lag = 12, type = "Box-Pierce", fitdf = 5)
# Box-Ljung
Box.test(res1, lag = 12, type = "Ljung-Box", fitdf = 5)
# McLeod-Li
Box.test((res1^2), lag = 12, type = "Ljung-Box", fitdf = 0)
# fit residuals to ar model
ar(res1, aic = T, order.max = NULL, method = c("yule-walker"))
par(mfrow = c(1, 2))
# roots and inverse roots of model 2's characteristic equations
plot.roots(polyroot(c(1, 0.3190)), NULL, main = "Roots of Nonseasonal AR Component")
plot.roots(polyroot(c(1, -0.1329, 0.2675)), NULL, main = "Roots of Seasonal AR Component")
par(mfrow = c(1, 3))
# fit model 2 to transformed data
fit2 <- arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 0), period = 4), method = "ML")
# retrieve model 2's residuals
res2 <- residuals(fit2)
# visualize model 2 residuals
plot.ts(res2, main = "Plot of Residuals", xlab = "Year", ylab = "Value")
abline(h = mean(res2), col = "red")
hist(res2, main = "Histogram of Residual Values")
qqnorm(res2, main = "Normal Q-Q Plot of Residual Values")
qqline(res2, col = "blue")
par(mfrow = c(1, 2))
acf(res2, lag.max = 40, main = "ACF of Model 2 Residuals")
pacf(res2, lag.max = 40, main = "PACF of Model 2 Residuals")
# Shapiro-Wilk
shapiro.test(res2)
# Box-Pierce
Box.test(res2, lag = 12, type = "Box-Pierce", fitdf = 3)
# Box-Ljung
Box.test(res2, lag = 12, type = "Ljung-Box", fitdf = 3)
# McLeod-Li
Box.test((res2^2), lag = 12, type = "Ljung-Box", fitdf = 0)
# fit model 2's residuals to ar model
ar(res2, aic = T, order.max = NULL, method = c("yule-walker"))
# predict 7 points ahead of fit1's data (Box-Cox transformed data)
bc_pred <- predict(fit1, n.ahead = 7)
# calculate upper and lower bounds of 95% confidence interval
upper_pred <- bc_pred$pred + (2 * bc_pred$se)
lower_pred <- bc_pred$pred - (2 * bc_pred$se)
# create time series data from predictions
pred_ts <- ts(data = bc_pred$pred, start = c(2023, 1), end = c(2024, 3), frequency = 4)
ts.plot(prices_bc, xlim = c(1985, 2025), ylim = c(2.84, 2.88), main = "Forecast of Transformed Data Using Model 1", xlab = "Year", ylab = "Price")
lines(upper_pred, col = "blue", lty = "dashed")
lines(lower_pred, col = "blue", lty = "dashed")
points(pred_ts, col = "red")
# retrieve the inverse Box-Cox transformed forecasted values
og_pred_ts <- InvBoxCox(bc_pred$pred, lambda = optimal_lambda)
# calculate upper and lower bounds of 95% C.I. for original data forecasts
U = InvBoxCox(upper_pred, optimal_lambda)
L = InvBoxCox(lower_pred, optimal_lambda)
ts.plot(prices_train, xlim = c(1985, 2025), ylim = c(50000, 325000), main = "Forecast of Original Data Using Model 1", xlab = "Year", ylab = "Price")
lines(U, col = "blue", lty = "dashed")
lines(L, col = "blue", lty = "dashed")
points(og_pred_ts, col = "red")
# visualize predicted values on original data compared to true values
ts.plot(prices, xlim = c(2020, 2025), ylim = c(140000, 325000), main = "Forecast of Original Data Using Model 1", xlab = "Year", ylab = "Price")
lines(U, col = "blue", lty = "dashed")
lines(L, col = "blue", lty = "dashed")
points(og_pred_ts, col = "red")
?AICc
par(mfrow = c(1, 2))
acf(y1, lag.max = 40, main = "ACF of Box-Cox Transformed Data Differenced at Lag 1")
library(tidyverse)
library(readxl)
library(MuMIn)
library(forecast)
# read in data
housing <- read_xlsx("~/Desktop/PSTAT 174/Project/medians_po_mh.xlsx")
# remove first three rows (headers, column names)
housing <- housing[-c(1:3), ]
# rename variables
colnames(housing) <- c("area", "year", "quarter", "median_price")
# convert price to a numeric variable
housing$median_price <- as.numeric(housing$median_price)
# create time series from "median_price" variable
# frequency = number of observations per cycle (a year is a cycle)
prices <- ts(housing$median_price, frequency = 4, start = c(1985, 1), end = c(2024, 3))
# training set
prices_train <- ts(prices[c(1:152)], frequency = 4, start = c(1985, 1), end = c(2022, 4))
# testing set
prices_test <- ts(prices[c(153:159)], frequency = 4, start = c(2023, 1), end = c(2024, 3))
plot(prices_train, main = "Median House Prices 1985-2024 (USA)", ylab = "Median Price ($)", xlab = "Year")
par(mfrow = c(1, 2))
hist(prices_train, main = "Histogram of Housing Prices", xlab = "Median Price ($)", col = "light blue")
acf(prices_train, lag.max = 50, main = "ACF of Housing Prices")
par(mfrow = c(1, 2))
# calculate the optimal value of lambda for the transformation
t <- 1:length(prices_train)
bc_trans <- MASS::boxcox(prices_train ~ t, plotit = T)
optimal_lambda <- bc_trans$x[which(bc_trans$y == max(bc_trans$y))]
# apply Box-Cox transformation to data
prices_bc <- (1 / optimal_lambda) * (prices_train^optimal_lambda - 1)
# visualize transformed data
hist(prices_bc, main = "Box-Cox Transformed Data", xlab = "Transformed Values", col = "light blue")
# retrieve different components of transformed data
components <- decompose(prices_bc)
plot(components)
# difference transformed data once at lag 1
y1 <- diff(prices_bc, lag = 1)
plot(y1, main = "Plot of Box-Cox Transformed + Differenced Data", xlab = "Year", ylab = "Transformed Values")
abline(h = mean(y1), col = "red")
paste("Variance of Box-Cox Transformed Data: ", var(prices_bc))
paste("Variance of Box-Cox Transformed and Differenced Data: ", var(y1))
# difference transformed + differenced data at lag 4
y14 <- diff(y1, lag = 4)
plot(y14, main = "Plot of Box-Cox Transformed + Differenced^2 Data", xlab = "Year", ylab = "Transformed Values")
abline(h = mean(y14), col = "red")
paste("Variance of Box-Cox Transformed Data: ", var(y1))
paste("Variance of Box-Cox Transformed and Differenced (twice) Data: ", var(y14))
par(mfrow = c(1, 2))
acf(y1, lag.max = 40, main = "ACF of Box-Cox Transformed Data Differenced at Lag 1")
pacf(y1, lag.max = 40, main = "PACF of Box-Cox Transformed Data Differenced at Lag 1")
# q = 1, Q = 2
arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(0, 0, 2), period = 4), method = "ML")
paste("AICc of model with q = 1, Q = 2, p = P = 0: ",
AICc(arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(0, 0, 2), period = 4), method = "ML"))
)
# q = 1, Q = 2, Q1 fixed
arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(0, 0, 2), period = 4), fixed = c(NA, 0, NA), method = "ML")
AICc(arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(0, 0, 2), period = 4), fixed = c(NA, 0, NA), method = "ML"))
# p = 1, P = 2
arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 0), period = 4), method = "ML")
paste("AICc of model with p = 1, P = 2, q = Q = 0: ",
AICc(arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 0), period = 4), method = "ML"))
)
# p = 1, P = 2, P1 fixed
arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 0), period = 4), fixed = c(NA, 0, NA), method = "ML")
AICc(arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 0), period = 4), fixed = c(NA, 0, NA), method = "ML"))
# p = 1, q = 0, P = 2, Q = 2
arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML")
paste("AICc of model with p = 1, P = 2, q = 0, Q = 2: ",
AICc(arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML"))
)
# models not shown
# q = 1, Q = 0
arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(0, 0, 0), period = 4), method = "ML")
AICc(arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(0, 0, 0), period = 4), method = "ML"))
# p = 1, P = 0
arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(0, 0, 0), period = 4), method = "ML")
AICc(arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(0, 0, 0), period = 4), method = "ML"))
# p = 0, P = 2
arima(prices_bc, order = c(0, 1, 0), seasonal = list(order = c(2, 0, 0), period = 4), method = "ML")
AICc(arima(prices_bc, order = c(0, 1, 0), seasonal = list(order = c(2, 0, 0), period = 4), method = "ML"))
# p = 0, q = 1, P = 2, Q = 2
arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML")
AICc(arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML"))
# p = 0, q = 0, P = 2, Q = 2
arima(prices_bc, order = c(0, 1, 0), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML")
AICc(arima(prices_bc, order = c(0, 1, 0), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML"))
# p = 1, q = 1, P = 2, Q = 2
arima(prices_bc, order = c(1, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML")
AICc(arima(prices_bc, order = c(1, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML"))
# p = 1, q = 1, P = 2, Q = 2, p1 = q1 = 0
arima(prices_bc, order = c(1, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), fixed = c(0, 0, NA, NA, NA, NA), method = "ML")
AICc(arima(prices_bc, order = c(1, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), fixed = c(0, 0, NA, NA, NA, NA), method = "ML"))
# p = 1, q = 1, P = 2, Q = 2, p1 = 0
arima(prices_bc, order = c(1, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), fixed = c(0, NA, NA, NA, NA, NA), method = "ML")
AICc(arima(prices_bc, order = c(1, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), fixed = c(0, NA, NA, NA, NA, NA), method = "ML"))
par(mfrow = c(1, 3))
# plot the roots and inverse roots of the model's characteristic equations
source("plot.roots.R")
plot.roots(polyroot(c(1, 0.3223)), NULL, main = "Roots of Nonseasonal AR Component")
plot.roots(NULL, polyroot(c(1, -0.6068, 0.7883)), main = "Roots of Seasonal MA Component")
plot.roots(polyroot(c(1, -0.3821, 0.8471)), NULL, main = "Roots of Seasonal AR Component")
par(mfrow = c(1, 3))
# fit model 1 to transformed data
fit1 <- arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML")
# retrieve residuals from model 1's fit
res1 <- residuals(fit1)
# visualize residuals of model 1
plot.ts(res1, main = "Plot of Residuals", xlab = "Year", ylab = "Value")
abline(h = mean(res1), col = "red")
hist(res1, main = "Histogram of Residual Values")
qqnorm(res1, main = "Normal Q-Q Plot of Residual Values")
qqline(res1, col = "blue")
par(mfrow = c(1, 2))
acf(res1, lag.max = 40, main = "ACF of Model 1 Residuals")
pacf(res1, lag.max = 40, main = "PACF of Model 1 Residuals")
# Shapiro-Wilk
shapiro.test(res1)
# Box-Pierce
Box.test(res1, lag = 12, type = "Box-Pierce", fitdf = 5)
# Box-Ljung
Box.test(res1, lag = 12, type = "Ljung-Box", fitdf = 5)
# McLeod-Li
Box.test((res1^2), lag = 12, type = "Ljung-Box", fitdf = 0)
# fit residuals to ar model
ar(res1, aic = T, order.max = NULL, method = c("yule-walker"))
par(mfrow = c(1, 2))
# roots and inverse roots of model 2's characteristic equations
plot.roots(polyroot(c(1, 0.3190)), NULL, main = "Roots of Nonseasonal AR Component")
plot.roots(polyroot(c(1, -0.1329, 0.2675)), NULL, main = "Roots of Seasonal AR Component")
par(mfrow = c(1, 3))
# fit model 2 to transformed data
fit2 <- arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 0), period = 4), method = "ML")
# retrieve model 2's residuals
res2 <- residuals(fit2)
# visualize model 2 residuals
plot.ts(res2, main = "Plot of Residuals", xlab = "Year", ylab = "Value")
abline(h = mean(res2), col = "red")
hist(res2, main = "Histogram of Residual Values")
qqnorm(res2, main = "Normal Q-Q Plot of Residual Values")
qqline(res2, col = "blue")
par(mfrow = c(1, 2))
acf(res2, lag.max = 40, main = "ACF of Model 2 Residuals")
pacf(res2, lag.max = 40, main = "PACF of Model 2 Residuals")
# Shapiro-Wilk
shapiro.test(res2)
# Box-Pierce
Box.test(res2, lag = 12, type = "Box-Pierce", fitdf = 3)
# Box-Ljung
Box.test(res2, lag = 12, type = "Ljung-Box", fitdf = 3)
# McLeod-Li
Box.test((res2^2), lag = 12, type = "Ljung-Box", fitdf = 0)
# fit model 2's residuals to ar model
ar(res2, aic = T, order.max = NULL, method = c("yule-walker"))
# predict 7 points ahead of fit1's data (Box-Cox transformed data)
bc_pred <- predict(fit1, n.ahead = 7)
# calculate upper and lower bounds of 95% confidence interval
upper_pred <- bc_pred$pred + (2 * bc_pred$se)
lower_pred <- bc_pred$pred - (2 * bc_pred$se)
# create time series data from predictions
pred_ts <- ts(data = bc_pred$pred, start = c(2023, 1), end = c(2024, 3), frequency = 4)
ts.plot(prices_bc, xlim = c(1985, 2025), ylim = c(2.84, 2.88), main = "Forecast of Transformed Data Using Model 1", xlab = "Year", ylab = "Price")
lines(upper_pred, col = "blue", lty = "dashed")
lines(lower_pred, col = "blue", lty = "dashed")
points(pred_ts, col = "red")
# retrieve the inverse Box-Cox transformed forecasted values
og_pred_ts <- InvBoxCox(bc_pred$pred, lambda = optimal_lambda)
# calculate upper and lower bounds of 95% C.I. for original data forecasts
U = InvBoxCox(upper_pred, optimal_lambda)
L = InvBoxCox(lower_pred, optimal_lambda)
ts.plot(prices_train, xlim = c(1985, 2025), ylim = c(50000, 325000), main = "Forecast of Original Data Using Model 1", xlab = "Year", ylab = "Price")
lines(U, col = "blue", lty = "dashed")
lines(L, col = "blue", lty = "dashed")
points(og_pred_ts, col = "red")
# visualize predicted values on original data compared to true values
ts.plot(prices, xlim = c(2020, 2025), ylim = c(140000, 325000), main = "Forecast of Original Data Using Model 1", xlab = "Year", ylab = "Price")
lines(U, col = "blue", lty = "dashed")
lines(L, col = "blue", lty = "dashed")
points(og_pred_ts, col = "red")
par(mfrow = c(1, 2))
acf(y1, lag.max = 40, main = "ACF of Transformed Data Differenced at Lag 1")
pacf(y1, lag.max = 40, main = "PACF of Transformed Data Differenced at Lag 1")
par(mfrow = c(1, 2))
acf(y1, lag.max = 40, main = "ACF of Box-Cox + Differenced at Lag 1")
pacf(y1, lag.max = 40, main = "PACF of Box-Cox + Differenced at Lag 1")
paste("Variance of Box-Cox Transformed Data: ", var(prices_bc))
paste("Variance of Box-Cox Transformed and Differenced Data: ", var(y1))
paste("Variance of Box-Cox Transformed and Twice Differenced Data: ", var(y14))
library(knitr)
library(kableExtra)
# Box-Pierce
boxpierce1 <- Box.test(res1, lag = 12, type = "Box-Pierce", fitdf = 5)
# Box-Ljung
boxljung1 <- Box.test(res1, lag = 12, type = "Ljung-Box", fitdf = 5)
# McLeod-Li
mcleodli1 <- Box.test((res1^2), lag = 12, type = "Ljung-Box", fitdf = 0)
stats <- matrix(
c(boxpierce1$statistic, boxpierce1$parameter, boxpierce1$p.value,
boxljung1$statistic, boxljung1$parameter, boxljung1$p.value,
mcleodli1$statistic, mcleodli1$parameter, mcleodli1$p.value
),
nrow = 3,
ncol = 3,
byrow = TRUE
)
colnames(stats) = c("$\\chi^2$", "df", "p-value")
rownames(stats) <- c("Box-Pierce", "Box-Ljung", "Mcleod-Li")
kable(table, caption = "Statistical Tests for Model 1", escape = FALSE)
kable(table, caption = "Statistical Tests for Model 1", escape = FALSE)
library(knitr)
library(kableExtra)
# Box-Pierce
boxpierce1 <- Box.test(res1, lag = 12, type = "Box-Pierce", fitdf = 5)
# Box-Ljung
boxljung1 <- Box.test(res1, lag = 12, type = "Ljung-Box", fitdf = 5)
# McLeod-Li
mcleodli1 <- Box.test((res1^2), lag = 12, type = "Ljung-Box", fitdf = 0)
stats <- matrix(
c(boxpierce1$statistic, boxpierce1$parameter, boxpierce1$p.value,
boxljung1$statistic, boxljung1$parameter, boxljung1$p.value,
mcleodli1$statistic, mcleodli1$parameter, mcleodli1$p.value
),
nrow = 3,
ncol = 3,
byrow = TRUE
)
colnames(stats) = c("$\\chi^2$", "df", "p-value")
rownames(stats) <- c("Box-Pierce", "Box-Ljung", "Mcleod-Li")
kable(table, caption = "Statistical Tests for Model 1", escape = FALSE)
# Box-Pierce
boxpierce1 <- Box.test(res1, lag = 12, type = "Box-Pierce", fitdf = 5)
# Box-Ljung
boxljung1 <- Box.test(res1, lag = 12, type = "Ljung-Box", fitdf = 5)
# McLeod-Li
mcleodli1 <- Box.test((res1^2), lag = 12, type = "Ljung-Box", fitdf = 0)
stats <- matrix(
c(boxpierce1$statistic, boxpierce1$parameter, boxpierce1$p.value,
boxljung1$statistic, boxljung1$parameter, boxljung1$p.value,
mcleodli1$statistic, mcleodli1$parameter, mcleodli1$p.value
),
nrow = 3,
ncol = 3,
byrow = TRUE
)
colnames(stats) = c("$\\chi^2$", "df", "p-value")
rownames(stats) <- c("Box-Pierce", "Box-Ljung", "Mcleod-Li")
kable(stats, caption = "Statistical Tests for Model 1", escape = FALSE)
reticulate::repl_python()
